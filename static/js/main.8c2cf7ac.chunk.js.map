{"version":3,"sources":["components/header/header.component.jsx","components/clicker/clicker.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","title","defaultProps","Clicker","handleIncrement","setState","prevState","count","handleDecreament","handleReset","state","this","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAGMA,G,YAAS,SAACC,GAAD,OACb,yBAAKC,UAAU,sCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,0CACb,yBAAKA,UAAU,6BAA6BC,KAAK,KAC9CF,EAAMG,YAOjBJ,EAAOK,aAAe,CACpBD,MAAO,SAGMJ,QCjBTM,G,wDACJ,WAAYL,GAAQ,IAAD,8BACjB,gBAOFM,gBAAkB,WAChB,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAAEC,MAAOD,EAAUC,MAAQ,OATxC,EAYnBC,iBAAmB,WACjB,EAAKH,UAAS,SAACC,GAAD,MAAgB,CAAEC,MAAOD,EAAUC,MAAQ,OAbxC,EAgBnBE,YAAc,WACZ,EAAKJ,UAAS,SAACC,GAAD,MAAgB,CAAEC,MAAO,OAdvC,EAAKG,MAAQ,CACXH,MAAOT,EAAMS,OAJE,E,qDAqBjB,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,qEACb,yBAAKA,UAAU,qBAAqBY,KAAKD,MAAMH,QAEjD,yBAAKR,UAAU,wCACb,4BACEA,UAAU,wBACVa,QAASD,KAAKP,iBAEd,uBAAGL,UAAU,sBAEf,4BACEA,UAAU,wBACVa,QAASD,KAAKF,aAEd,uBAAGV,UAAU,yBAEf,4BACEA,UAAU,uBACVa,QAASD,KAAKH,kBAEd,uBAAGT,UAAU,8B,GA7CLc,IAAMC,YAsD5BX,EAAQD,aAAe,CACrBK,MAAO,GAGMJ,QCpCAY,E,kDAnBb,aAAe,IAAD,8BACZ,gBAEKL,MAAQ,CACXT,MAAO,iBAJG,E,qDAQZ,OACE,6BACE,kBAAC,EAAD,CAAQA,MAAOU,KAAKD,MAAMT,QAC1B,yBAAKF,UAAU,QACb,kBAAC,EAAD,Y,GAbQc,IAAMC,WCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c2cf7ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.styles.scss\";\r\n\r\nconst Header = (props) => (\r\n  <nav className=\" header navbar navbar-dark bg-dark\">\r\n    <div className=\"container\">\r\n      <div className=\"row m-auto\">\r\n        <i className=\"fa fa-hand-pointer-o fa-4x text-white\"></i>\r\n        <div className=\"h1 ml-2 my-auto text-light\" href=\"/\">\r\n          {props.title}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  title: \"Title\",\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./clicker.styles.scss\";\r\n\r\nclass Clicker extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      count: props.count,\r\n    };\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\r\n  };\r\n\r\n  handleDecreament = () => {\r\n    this.setState((prevState) => ({ count: prevState.count - 1 }));\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState((prevState) => ({ count: 0 }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"clicker border border-secondary rounded\">\r\n          <div className=\"clicker-display d-flex align-items-center bg-light text-secondary\">\r\n            <div className=\"mx-auto display-1\">{this.state.count}</div>\r\n          </div>\r\n          <div className=\"clicker-button-panel d-flex flex-row\">\r\n            <button\r\n              className=\"btn btn-success w-100\"\r\n              onClick={this.handleIncrement}\r\n            >\r\n              <i className=\"fa fa-plus fa-2x\"></i>\r\n            </button>\r\n            <button\r\n              className=\"btn btn-warning w-100\"\r\n              onClick={this.handleReset}\r\n            >\r\n              <i className=\"fa fa-refresh fa-2x\"></i>\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger w-100\"\r\n              onClick={this.handleDecreament}\r\n            >\r\n              <i className=\"fa fa-minus fa-2x\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClicker.defaultProps = {\r\n  count: 0,\r\n};\r\n\r\nexport default Clicker;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header/header.component\";\nimport Clicker from \"./components/clicker/clicker.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: \"React Clicker\",\n    };\n  }\n  render() {\n    return (\n      <div>\n        <Header title={this.state.title} />\n        <div className=\"mt-5\">\n          <Clicker />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}